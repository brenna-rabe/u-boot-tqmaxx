U-Boot for the TQ-Systems i.MX8MP TQMa8MPxL SOM family

Supported variants
==================

Only REV.020x hardware of SOM is supported.

TQMa8MPxL / 1 GiB NO ECC LPDDR4 / i.MX8MP
TQMa8MPxL / 2 GiB NO ECC LPDDR4 / i.MX8MP
TQMa8MPxL / 4 GiB NO ECC LPDDR4 / i.MX8MP
TQMa8MPxL / 8 GiB NO ECC LPDDR4 / i.MX8MP

configs:

tqma8mpxl_multi_mba8mpxl_defconfig (single image for multiple RAM sizes)
tqma8mpxl_2gb_mba8mpxl_defconfig (REV.020x prototypes, 2GiB RAM without variant data in EEPROM)

Memory Usage
============

SPL
---

SPL_LOAD_ADDR / SPL_TEXT_BASE	0x920000 (OCRAM) - max size 152 KiB
CONFIG_SPL_STACK		OCRAM_S (Initial Stack)
BSS				OCRAM (after Code, 0x0095e000)
SPL_IMX_ROMAPI_LOADADDR		0x48000000 (RAM, load address for next boot
				container using ROM API)
SYS_SPL_MALLOC_START/SIZE	RAM, used after RAM init
MALLOC_F_ADDR			OCRAM_S, used before RAM init. Located after
				SAVED_DRAM_TIMING_BASE
SPL_SYS_MALLOC_F_LEN		length of malloc space before RAM init

see include/configs/tqma8mpxl.h

Shared
------

SAVED_DRAM_TIMING_BASE		0x180000 (OCRAM_S, used by SPL + ATF/TF-A)
BLOBLIST_ADDR			0x40000000 (DRAM start, used to transfer Data
				from SPL to BL33 / U-Boot)

ATF
---

ATF_LOAD_ADDR			default 0x00970000 (OCRAM) needs to match ATF
				linker settings

U-Boot
------

SYS_TEXT_BASE			DRAM U-Boot start address (before relocation)
SYS_INIT_RAM_ADDR		0x40000000 + BLOBLIST_SIZE (initial RAM used
				before relocation for SP, malloc, global Data)
SYS_INIT_RAM_SIZE		size of above memory, default to

Cortex M
--------

load address for CortexM:	0x7e0000 (ITCM) if linked for TCM

TODO: TEE/OPTEE

Quick Start
===========

- Build the ARM Trusted firmware binary
- Build U-Boot
- Flash the binary into the SD card
- Boot

Get and Build the ARM Trusted firmware
======================================

$ git clone https://github.com/tq-systems/atf.git
$ cd atf/
$ git checkout origin/TQMa8-imx_5.4.70_2.3.0 -b TQMa8-imx_5.4.70_2.3.0
$ make PLAT=imx8mp IMX_BOOT_UART_BASE=0x30a60000 bl31

Get the ddr and hdmi firmware
=============================

$ wget https://www.nxp.com/lgfiles/NMG/MAD/YOCTO/firmware-imx-8.10.bin
$ chmod +x firmware-imx-8.10.bin
$ ./firmware-imx-8.10.bin

Prepare build folder
====================

Copy the following binaries to U-Boot folder:

$ cp atf/build/imx8mp/release/bl31.bin .
$ cp firmware-imx-8.10/firmware/hdmi/cadence/signed_hdmi_imx8m.bin .
$ cp firmware-imx-8.10/firmware/ddr/synopsys/lpddr4*_202006.bin .


Build U-Boot
============

$ export CROSS_COMPILE=<compiler prefix>
$ make tqma8mpxl_mba8mpxl_defconfig
$ export ATF_LOAD_ADDR=0x00970000
$ make flash.bin

Flash the binary into the SD card
=================================

Burn the flash.bin binary to SD card offset 32KB:

$ sudo dd if=flash.bin of=/dev/sd[x] bs=1024 seek=32

Boot
====

Set Boot switch SW2[4:1]: 1100.

Inline ECC
=========

Timings for the inline ECC feature of the i.MX8MP DDRC are shipped. To use
the inline ECC feature enable CONFIG_IMX8M_DRAM_INLINE_ECC.

The ECC configuration provided with the timing files initializes the whole
DRAM as ECC protected. To store ECC parity data, the top 1/8 of DRAM is
used. The other 7/8 of DRAM can be used as usual.

The ECC parity region consists of 8 sections (1/64 of total memory size
each). Seven of these sections hold ECC parity data for the 7 other main
memory regions, i.e. ECC parity section N protects main memory region N.
The other ECC parity region section (the one on the start of the ECC parity
region) can be used for ordinary user data.

ECC memory layout
-----------------

TOTAL_MEM_SIZE   = (0x40000000 (1GiB) | 0x80000000 (2GiB) | 0x100000000 (4GiB) | 0x200000000 (8GiB))
SYS_SDRAM_BASE   = 0x40000000
MM_REGION_SIZE   = TOTAL_MEM_SIZE / 8
ECC_SECTION_SIZE = TOTAL_MEM_SIZE / (8 * 8)
ECC_PARITY_BASE  = SYS_SDRAM_BASE + 7 * MM_REGION_SIZE

ECC parity region

ECC parity region section   | Start address                          | Size             | Memory attribute
--------------------------- | -------------------------------------- | -----------------| ----------------
ECC parity region 0 section | ECC_PARITY_BASE + 7 * ECC_SECTION_SIZE | ECC_SECTION_SIZE | inaccessible
ECC parity region 1 section | ECC_PARITY_BASE + 6 * ECC_SECTION_SIZE | ECC_SECTION_SIZE | inaccessible
ECC parity region 2 section | ECC_PARITY_BASE + 5 * ECC_SECTION_SIZE | ECC_SECTION_SIZE | inaccessible
ECC parity region 3 section | ECC_PARITY_BASE + 4 * ECC_SECTION_SIZE | ECC_SECTION_SIZE | inaccessible
ECC parity region 4 section | ECC_PARITY_BASE + 3 * ECC_SECTION_SIZE | ECC_SECTION_SIZE | inaccessible
ECC parity region 5 section | ECC_PARITY_BASE + 2 * ECC_SECTION_SIZE | ECC_SECTION_SIZE | inaccessible
ECC parity region 6 section | ECC_PARITY_BASE + 1 * ECC_SECTION_SIZE | ECC_SECTION_SIZE | inaccessible
No ECC data                 | ECC_PARITY_BASE                        | ECC_SECTION_SIZE | accessible

Main memory

Main memory region          | Start address                          | Size             | ECC protection
--------------------------- | -------------------------------------- | -----------------| --------------
ECC parity region           | SYS_SDRAM_BASE + 7 * MM_REGION_SIZE    | MM_REGION_SIZE   | -
Main memory region 6        | SYS_SDRAM_BASE + 6 * MM_REGION_SIZE    | MM_REGION_SIZE   | protected
Main memory region 5        | SYS_SDRAM_BASE + 5 * MM_REGION_SIZE    | MM_REGION_SIZE   | protected
Main memory region 4        | SYS_SDRAM_BASE + 4 * MM_REGION_SIZE    | MM_REGION_SIZE   | protected
Main memory region 3        | SYS_SDRAM_BASE + 3 * MM_REGION_SIZE    | MM_REGION_SIZE   | protected
Main memory region 2        | SYS_SDRAM_BASE + 2 * MM_REGION_SIZE    | MM_REGION_SIZE   | protected
Main memory region 1        | SYS_SDRAM_BASE + 1 * MM_REGION_SIZE    | MM_REGION_SIZE   | protected
Main memory region 0        | SYS_SDRAM_BASE                         | MM_REGION_SIZE   | protected
