// SPDX-License-Identifier: GPL-2.0
/*
 * Copyright (C) 2016-2018 Texas Instruments Incorporated - http://www.ti.com/
 * Copyright (C) 2020-2022 TQ-Systems GmbH
 * Author: Matthias Schiffer <matthias.schiffer@ew.tq-group.com>
 */

/dts-v1/;
#include <dt-bindings/input/input.h>
#include <dt-bindings/net/ti-dp83867.h>
#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/phy/phy.h>
#include <dt-bindings/phy/phy-am654-serdes.h>
#include "k3-am654-tqma65xx.dtsi"

/ {
	compatible = "tq,am654-tqma6548-mba65xx", "tq,am654-tqma6548",
		"ti,am654";
	model = "TQ-Systems TQMa65xx SoM on MBa65xx carrier board";

	aliases {
		ethernet5 = &pruss2_emac0;
		ethernet6 = &pruss2_emac1;
	};

	chosen {
		stdout-path = "serial2:115200n8";
		bootargs = "earlycon=ns16550a,mmio32,0x02800000";
	};

	gpio-keys {
		compatible = "gpio-keys";

		nav0 {
			label = "NAV0";
			linux,code = <BTN_0>;
			gpios = <&pca9555_21 11 GPIO_ACTIVE_LOW>;
		};
		nav1 {
			label = "NAV1";
			linux,code = <BTN_1>;
			gpios = <&pca9555_21 12 GPIO_ACTIVE_LOW>;
		};
		nav2 {
			label = "NAV2";
			linux,code = <BTN_2>;
			gpios = <&pca9555_21 13 GPIO_ACTIVE_LOW>;
		};
	};

	leds {
		compatible = "gpio-leds";

		led0 {
			label = "led0";
			gpios = <&pca9555_20 11 GPIO_ACTIVE_HIGH>;
		};
		led1 {
			label = "led1";
			gpios = <&pca9555_21 14 GPIO_ACTIVE_HIGH>;
		};
	};

	/* Dual Ethernet application node on PRU-ICSSG2 */
	pruss2_eth: pruss2_eth {
		compatible = "ti,am654-icssg-prueth";
		pinctrl-names = "default";
		pinctrl-0 = <&icssg2_rgmii_pins_default>;
		sram = <&msmc_ram>;
		prus = <&pru2_0>, <&rtu2_0>, <&tx_pru2_0>,
			<&pru2_1>, <&rtu2_1>, <&tx_pru2_1>;
		firmware-name = "ti-pruss/am65x-sr2-pru0-prueth-fw.elf",
				"ti-pruss/am65x-sr2-rtu0-prueth-fw.elf",
				"ti-pruss/am65x-sr2-txpru0-prueth-fw.elf",
				"ti-pruss/am65x-sr2-pru1-prueth-fw.elf",
				"ti-pruss/am65x-sr2-rtu1-prueth-fw.elf",
				"ti-pruss/am65x-sr2-txpru1-prueth-fw.elf";

		ti,pruss-gp-mux-sel = <2>,      /* MII mode */
				      <2>,
				      <2>,
				      <2>,	/* MII mode */
				      <2>,
				      <2>;
		mii-g-rt = <&icssg2_mii_g_rt>;
		mii-rt = <&icssg2_mii_rt>;
		dma-coherent;
		dmas = <&main_udmap 0xc300>, /* egress slice 0 */
		       <&main_udmap 0xc301>, /* egress slice 0 */
		       <&main_udmap 0xc302>, /* egress slice 0 */
		       <&main_udmap 0xc303>, /* egress slice 0 */
		       <&main_udmap 0xc304>, /* egress slice 1 */
		       <&main_udmap 0xc305>, /* egress slice 1 */
		       <&main_udmap 0xc306>, /* egress slice 1 */
		       <&main_udmap 0xc307>, /* egress slice 1 */

		       <&main_udmap 0x4300>, /* ingress slice 0 */
		       <&main_udmap 0x4301>, /* ingress slice 1 */
		       <&main_udmap 0x4302>, /* mgmnt rsp slice 0 */
		       <&main_udmap 0x4303>; /* mgmnt rsp slice 1 */
		dma-names = "tx0-0", "tx0-1", "tx0-2", "tx0-3",
			    "tx1-0", "tx1-1", "tx1-2", "tx1-3",
			    "rx0", "rx1",
			    "rxmgm0", "rxmgm1";

		pruss2_emac0: ethernet-mii0 {
			phy-handle = <&pruss2_eth0_phy>;
			phy-mode = "rgmii-rxid";
			interrupts-extended = <&icssg2_intc 24>;
			syscon-rgmii-delay = <&scm_conf 0x4120>;
			iep = <&icssg2_iep0>;
			/* Filled in by bootloader */
			local-mac-address = [00 00 00 00 00 00];
		};

		pruss2_emac1: ethernet-mii1 {
			phy-handle = <&pruss2_eth1_phy>;
			phy-mode = "rgmii-rxid";
			interrupts-extended = <&icssg2_intc 25>;
			syscon-rgmii-delay = <&scm_conf 0x4124>;
			/* Filled in by bootloader */
			local-mac-address = [00 00 00 00 00 00];
		};
	};
};

&main_uart0 {
	pinctrl-names = "default";
	pinctrl-0 = <&main_uart0_pins_default>;
	power-domains = <&k3_pds 146 TI_SCI_PD_SHARED>;
	status = "okay";
};

&mcu_i2c0 {
	pinctrl-names = "default";
	pinctrl-0 = <&mcu_i2c_pins_default>, <&mcu_i2c_int_pins_default>;
	clock-frequency = <400000>;
	status = "okay";

	pca9555_20: gpio@20 {
		compatible = "nxp,pca9555";
		reg = <0x20>;
		gpio-controller;
		#gpio-cells = <2>;
		interrupt-controller;
		#interrupt-cells = <2>;
		interrupt-parent = <&main_gpio1>;
		interrupts = <48 IRQ_TYPE_EDGE_FALLING>;

		p1 {
			gpio-hog;
			gpios = <1 GPIO_ACTIVE_HIGH>;
			input;
			line-name = "PRG0_RGMII_INT#";
		};
		p4 {
			gpio-hog;
			gpios = <4 GPIO_ACTIVE_HIGH>;
			input;
			line-name = "PRG1_RGMII_INT#";
		};
		p8 {
			gpio-hog;
			gpios = <8 GPIO_ACTIVE_HIGH>;
			input;
			line-name = "PRG2_RGMII_INT#";
		};
		p10 {
			gpio-hog;
			gpios = <10 GPIO_ACTIVE_HIGH>;
			input;
			line-name = "MCU_RGMII_INT#";
		};
	};

	pca9555_21: gpio@21 {
		compatible = "nxp,pca9555";
		reg = <0x21>;
		gpio-controller;
		#gpio-cells = <2>;
		interrupt-controller;
		#interrupt-cells = <2>;
		interrupt-parent = <&main_gpio1>;
		interrupts = <48 IRQ_TYPE_EDGE_FALLING>;

		p0 {
			gpio-hog;
			gpios = <0 GPIO_ACTIVE_HIGH>;
			output-high;
			line-name = "MPCIE_1V5_EN";
		};
		p6 {
			gpio-hog;
			gpios = <6 GPIO_ACTIVE_HIGH>;
			output-high;
			line-name = "USB_HUB_RST#";
		};
		p7 {
			gpio-hog;
			gpios = <7 GPIO_ACTIVE_HIGH>;
			output-high;
			line-name = "CLK_PDN#";
		};
		p8 {
			/* MPCIE_RST# is used both for mPCIe- and USB-based
			 * cards in the mPCIe slot, so we hog it rather than
			 * assigning it to the PCIe node as a reset GPIO.
			 */
			gpio-hog;
			gpios = <8 GPIO_ACTIVE_HIGH>;
			output-high;
			line-name = "MPCIE_RST#";
		};
		p9 {
			/* Hog corresponds to RFKILL pin for mPCIe radio cards
			 * (WLAN, BE, LTE, ...) - remove hog to allow userspace
			 * control
			 */
			gpio-hog;
			gpios = <9 GPIO_ACTIVE_HIGH>;
			output-high;
			line-name = "MPCIE_DIS#";
		};
	};

	power-sensor@40 {
		compatible = "ti,ina226";
		reg = <0x40>;
		shunt-resistor = <3000>;
	};

	power-sensor@45 {
		compatible = "ti,ina226";
		reg = <0x45>;
		shunt-resistor = <3000>;
	};
};

&ecap0 {
	pinctrl-names = "default";
	pinctrl-0 = <&ecap0_pins_default>;
	status = "okay";
};

&sdhci1 {
	pinctrl-names = "default";
	pinctrl-0 = <&main_mmc1_pins_default>;
	sdhci-caps-mask = <0x7 0x0>;
	no-mmc;
	no-sdio;
	ti,driver-strength-ohm = <50>;
	disable-wp;
	status = "okay";
};

&m_can0 {
	pinctrl-names = "default";
	pinctrl-0 = <&mcu_mcan0_pins_default>;
	status = "okay";

	can-transceiver {
		max-bitrate = <5000000>;
	};
};

&m_can1 {
	pinctrl-names = "default";
	pinctrl-0 = <&mcu_mcan1_pins_default>;
	status = "okay";

	can-transceiver {
		max-bitrate = <5000000>;
	};
};

&serdes0 {
	assigned-clocks = <&k3_clks 153 4>, <&serdes0 AM654_SERDES_CMU_REFCLK>;
	assigned-clock-parents = <&k3_clks 153 7>, <&k3_clks 153 4>;
	status = "okay";
};

&dwc3_0 {
	assigned-clock-parents = <&k3_clks 151 4>, <&k3_clks 151 8>;
	phys = <&serdes0 PHY_TYPE_USB3 0>;
	phy-names = "usb3-phy";
	status = "okay";
};

&usb0 {
	pinctrl-names = "default";
	pinctrl-0 = <&usb0_pins_default>;
	dr_mode = "otg";
	maximum-speed = "super-speed";
	snps,dis-u1-entry-quirk;
	snps,dis-u2-entry-quirk;
};

&usb0_phy {
	status = "okay";
};

&dwc3_1 {
	status = "okay";
};

&usb1 {
	pinctrl-names = "default";
	pinctrl-0 = <&usb1_pins_default>;
	dr_mode = "host";
};

&usb1_phy {
	status = "okay";
};

&tscadc0 {
	status = "okay";

	adc {
		ti,adc-channels = <0 1 2 3 4 5 6 7>;
	};
};

&tscadc1 {
	status = "okay";

	adc {
		ti,adc-channels = <0 1 2 3 4 5 6 7>;
	};
};

&serdes1 {
	status = "okay";
};

&pcie1_rc {
	num-lanes = <1>;
	phys = <&serdes1 PHY_TYPE_PCIE 0>;
	phy-names = "pcie-phy0";
	status = "okay";
};

&mcu_cpsw {
	pinctrl-names = "default";
	pinctrl-0 = <&mcu_cpsw_pins_default &mcu_mdio_pins_default>;
	status = "okay";
};

&davinci_mdio {
	phy1: ethernet-phy@1 {
		reg = <1>;
		reset-gpios = <&pca9555_20 9 GPIO_ACTIVE_LOW>;
		reset-assert-us = <1000>;
		reset-deassert-us = <1000>;
		ti,rx-internal-delay = <DP83867_RGMIIDCTL_2_00_NS>;
		ti,fifo-depth = <DP83867_PHYCR_FIFO_DEPTH_4_B_NIB>;
	};
};

&cpsw_port1 {
	phy-mode = "rgmii-rxid";
	phy-handle = <&phy1>;
};

&icssg2_mdio {
	pinctrl-names = "default";
	pinctrl-0 = <&icssg2_mdio_pins_default>;
	reset-gpios = <&pca9555_20 7 GPIO_ACTIVE_LOW>;
	reset-delay-us = <1000>;
	status = "okay";

	/* ti,force-master is required due to the high jitter of our clock
	 * generator. This is a workaround and prevents connections to other
	 * devices that also require to use master mode (like the PRU Ethernet
	 * ports of other MBa65xx mainboards)
	 */
	pruss2_eth0_phy: ethernet-phy@1 {
		reg = <1>;
		ti,rx-internal-delay = <DP83867_RGMIIDCTL_2_00_NS>;
		ti,fifo-depth = <DP83867_PHYCR_FIFO_DEPTH_4_B_NIB>;
		ti,force-master;
	};

	pruss2_eth1_phy: ethernet-phy@2 {
		reg = <2>;
		ti,rx-internal-delay = <DP83867_RGMIIDCTL_2_00_NS>;
		ti,fifo-depth = <DP83867_PHYCR_FIFO_DEPTH_4_B_NIB>;
		ti,force-master;
	};
};

&main_pmx0 {
	main_uart0_pins_default: main_uart0_pins_default {
		pinctrl-single,pins = <
			/* (AF11) UART0_RXD */
			AM65X_IOPAD(0x01e4, PIN_INPUT, 0)
			/* (AE11) UART0_TXD */
			AM65X_IOPAD(0x01e8, PIN_OUTPUT, 0)
			/* (AG11) UART0_CTSn */
			AM65X_IOPAD(0x01ec, PIN_INPUT, 0)
			/* (AD11) UART0_RTSn */
			AM65X_IOPAD(0x01f0, PIN_OUTPUT, 0)
		>;
	};

	main_mmc1_pins_default: main_mmc1_pins_default {
		pinctrl-single,pins = <
			/* (C27) MMC1_CLK */
			AM65X_IOPAD(0x02d4, PIN_INPUT_PULLDOWN, 0)
			/* (C28) MMC1_CMD */
			AM65X_IOPAD(0x02d8, PIN_INPUT_PULLUP, 0)
			/* (D28) MMC1_DAT0 */
			AM65X_IOPAD(0x02d0, PIN_INPUT_PULLUP, 0)
			/* (E27) MMC1_DAT1 */
			AM65X_IOPAD(0x02cc, PIN_INPUT_PULLUP, 0)
			/* (D26) MMC1_DAT2 */
			AM65X_IOPAD(0x02c8, PIN_INPUT_PULLUP, 0)
			/* (D27) MMC1_DAT3 */
			AM65X_IOPAD(0x02c4, PIN_INPUT_PULLUP, 0)
			/* (B24) MMC1_SDCD */
			AM65X_IOPAD(0x02dc, PIN_INPUT_PULLUP, 0)
			/* (C24) MMC1_SDWP */
			AM65X_IOPAD(0x02e0, PIN_INPUT, 0)
		>;
	};

	usb1_pins_default: usb1_pins_default {
		pinctrl-single,pins = <
			/* (AC8) USB1_DRVVBUS */
			AM65X_IOPAD(0x02c0, PIN_OUTPUT, 0)
		>;
	};

	usb0_pins_default: usb0_pins_default {
		pinctrl-single,pins = <
			/* (AD9) USB0_DRVVBUS */
			AM65X_IOPAD(0x02bc, PIN_OUTPUT, 0)
		>;
	};

	icssg2_mdio_pins_default: icssg2_mdio_pins_default {
		pinctrl-single,pins = <
			/* (AC19) PRG2_PRU0_GPO7.PRG2_MDIO0_MDIO */
			AM65X_IOPAD(0x0094, PIN_INPUT, 2)
			/* (AE15) PRG2_PRU1_GPO7.PRG2_MDIO0_MDC */
			AM65X_IOPAD(0x00c8, PIN_OUTPUT, 2)
		>;
	};

	icssg2_rgmii_pins_default: icssg2_rgmii_pins_default {
		pinctrl-single,pins = <
			/* (AF18) PRG2_PRU0_GPO0.PRG2_RGMII1_RD0 */
			AM65X_IOPAD(0x0078, PIN_INPUT, 2)
			/* (AE18) PRG2_PRU0_GPO1.PRG2_RGMII1_RD1 */
			AM65X_IOPAD(0x007c, PIN_INPUT, 2)
			/* (AH17) PRG2_PRU0_GPO2.PRG2_RGMII1_RD2 */
			AM65X_IOPAD(0x0080, PIN_INPUT, 2)
			/* (AG18) PRG2_PRU0_GPO3.PRG2_RGMII1_RD3 */
			AM65X_IOPAD(0x0084, PIN_INPUT, 2)
			/* (AH16) PRG2_PRU0_GPO8.PRG2_RGMII1_TD0 */
			AM65X_IOPAD(0x0098, PIN_OUTPUT, 2)
			/* (AG16) PRG2_PRU0_GPO9.PRG2_RGMII1_TD1 */
			AM65X_IOPAD(0x009c, PIN_OUTPUT, 2)
			/* (AF16) PRG2_PRU0_GPO10.PRG2_RGMII1_TD2 */
			AM65X_IOPAD(0x00a0, PIN_OUTPUT, 2)
			/* (AE16) PRG2_PRU0_GPO11.PRG2_RGMII1_TD3 */
			AM65X_IOPAD(0x00a4, PIN_OUTPUT, 2)
			/* (AD16) PRG2_PRU0_GPO16.PRG2_RGMII1_TXC */
			AM65X_IOPAD(0x00a8, PIN_INPUT, 2)
			/* (AE17) PRG2_PRU0_GPO6.PRG2_RGMII1_TX_CTL */
			AM65X_IOPAD(0x0090, PIN_OUTPUT, 2)
			/* (AF17) PRG2_PRU0_GPO5.PRG2_RGMII1_RXC */
			AM65X_IOPAD(0x008c, PIN_INPUT, 2)
			/* (AG17) PRG2_PRU0_GPO4.PRG2_RGMII1_RX_CTL */
			AM65X_IOPAD(0x0088, PIN_INPUT, 2)

			/* (AH15) PRG2_PRU1_GPO0.PRG2_RGMII2_RD0 */
			AM65X_IOPAD(0x00ac, PIN_INPUT, 2)
			/* (AC16) PRG2_PRU1_GPO1.PRG2_RGMII2_RD1 */
			AM65X_IOPAD(0x00b0, PIN_INPUT, 2)
			/* (AD17) PRG2_PRU1_GPO2.PRG2_RGMII2_RD2 */
			AM65X_IOPAD(0x00b4, PIN_INPUT, 2)
			/* (AH14) PRG2_PRU1_GPO3.PRG2_RGMII2_RD3 */
			AM65X_IOPAD(0x00b8, PIN_INPUT, 2)
			/* (AD15) PRG2_PRU1_GPO8.PRG2_RGMII2_TD0 */
			AM65X_IOPAD(0x00cc, PIN_OUTPUT, 2)
			/* (AF14) PRG2_PRU1_GPO9.PRG2_RGMII2_TD1 */
			AM65X_IOPAD(0x00d0, PIN_OUTPUT, 2)
			/* (AC15) PRG2_PRU1_GPO10.PRG2_RGMII2_TD2 */
			AM65X_IOPAD(0x00d4, PIN_OUTPUT, 2)
			/* (AD14) PRG2_PRU1_GPO11.PRG2_RGMII2_TD3 */
			AM65X_IOPAD(0x00d8, PIN_OUTPUT, 2)
			/* (AE14) PRG2_PRU1_GPO16.PRG2_RGMII2_TXC */
			AM65X_IOPAD(0x00dc, PIN_INPUT, 2)
			/* (AC17) PRG2_PRU1_GPO6.PRG2_RGMII2_TX_CTL */
			AM65X_IOPAD(0x00c4, PIN_OUTPUT, 2)
			/* (AG15) PRG2_PRU1_GPO5.PRG2_RGMII2_RXC */
			AM65X_IOPAD(0x00c0, PIN_INPUT, 2)
			/* (AG14) PRG2_PRU1_GPO4.PRG2_RGMII2_RX_CTL */
			AM65X_IOPAD(0x00bc, PIN_INPUT, 2)
		>;
	};

	mcu_i2c_int_pins_default: mcu_i2c_int_pins_default {
		pinctrl-single,pins = <
			/* (U24) PRG0_PRU0_GPO19.GPIO1_48 */
			AM65X_IOPAD(0x0240, PIN_INPUT, 7)
		>;
	};
};

&main_pmx1 {
	ecap0_pins_default: ecap0_pins_default {
		pinctrl-single,pins = <
			/* (D21) ECAP0_IN_APWM_OUT */
			AM65X_IOPAD(0x0010, PIN_INPUT, 0)
		>;
	};
};

&wkup_pmx0 {
	mcu_mcan0_pins_default: mcu_mcan0_pins_default {
		pinctrl-single,pins = <
			/* (W2) MCU_MCAN0_RX */
			AM65X_WKUP_IOPAD(0x00ac, PIN_INPUT, 0)
			/* (W1) MCU_MCAN0_TX */
			AM65X_WKUP_IOPAD(0x00a8, PIN_OUTPUT, 0)
		>;
	};

	mcu_mcan1_pins_default: mcu_mcan1_pins_default {
		pinctrl-single,pins = <
			/* (AD3) WKUP_GPIO0_5.MCU_MCAN1_RX */
			AM65X_WKUP_IOPAD(0x00c4, PIN_INPUT, 1)
			/* (AC3) WKUP_GPIO0_4.MCU_MCAN1_TX */
			AM65X_WKUP_IOPAD(0x00c0, PIN_OUTPUT, 1)
		>;
	};

	mcu_i2c_pins_default: mcu_i2c_pins_default {
		pinctrl-single,pins = <
			/* (AD8) MCU_I2C0_SCL */
			AM65X_WKUP_IOPAD(0x00e8, PIN_INPUT, 0)
			/* (AD7) MCU_I2C0_SDA */
			AM65X_WKUP_IOPAD(0x00ec, PIN_INPUT, 0)
		>;
	};

	mcu_cpsw_pins_default: mcu_cpsw_pins_default {
		pinctrl-single,pins = <
			/* (N4) MCU_RGMII1_TX_CTL */
			AM65X_WKUP_IOPAD(0x0058, PIN_OUTPUT, 0)
			/* (N5) MCU_RGMII1_RX_CTL */
			AM65X_WKUP_IOPAD(0x005c, PIN_INPUT, 0)
			/* (M2) MCU_RGMII1_TD3 */
			AM65X_WKUP_IOPAD(0x0060, PIN_OUTPUT, 0)
			/* (M3) MCU_RGMII1_TD2 */
			AM65X_WKUP_IOPAD(0x0064, PIN_OUTPUT, 0)
			/* (M4) MCU_RGMII1_TD1 */
			AM65X_WKUP_IOPAD(0x0068, PIN_OUTPUT, 0)
			/* (M5) MCU_RGMII1_TD0 */
			AM65X_WKUP_IOPAD(0x006c, PIN_OUTPUT, 0)
			/* (L2) MCU_RGMII1_RD3 */
			AM65X_WKUP_IOPAD(0x0078, PIN_INPUT, 0)
			/* (L5) MCU_RGMII1_RD2 */
			AM65X_WKUP_IOPAD(0x007c, PIN_INPUT, 0)
			/* (M6) MCU_RGMII1_RD1 */
			AM65X_WKUP_IOPAD(0x0080, PIN_INPUT, 0)
			/* (L6) MCU_RGMII1_RD0 */
			AM65X_WKUP_IOPAD(0x0084, PIN_INPUT, 0)
			/* (N1) MCU_RGMII1_TXC */
			AM65X_WKUP_IOPAD(0x0070, PIN_INPUT, 0)
			/* (M1) MCU_RGMII1_RXC */
			AM65X_WKUP_IOPAD(0x0074, PIN_INPUT, 0)
		>;
	};

	mcu_mdio_pins_default: mcu_mdio1_pins_default {
		pinctrl-single,pins = <
			/* (L1) MCU_MDIO0_MDC */
			AM65X_WKUP_IOPAD(0x008c, PIN_OUTPUT, 0)
			/* (L4) MCU_MDIO0_MDIO */
			AM65X_WKUP_IOPAD(0x0088, PIN_INPUT, 0)
		>;
	};
};
